# import MutationType,PictureSubscriptionWhereInput,PictureSubscriptionPayload,User,File, Product from "./generated/prisma.graphql"

scalar Upload

type File {
  id: ID
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
}
type Bigpic {
  id: ID
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
}
type Bigpicture {
  id: ID
  file: String!
  upload: [Bigpic!]
}
type BigpicturePreviousValues {
  id: ID!
  file: String!
  upload: [Bigpic!]
}
type BigpictureSubscriptionPayload {
  mutation: MutationType!
  node: Bigpicture
  updatedFields: [String!]
  previousValues: BigpicturePreviousValues
}

type Query {
  getInfo(file: String!): File
  uploads: [File]
  bigpicture(
    where: PictureWhereInput
    orderBy: PictureOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Bigpicture
  bigpictures(
    where: PictureWhereInput
    orderBy: PictureOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Bigpicture]
}
type Mutation {
  upsertBigpicture(
    where: PictureWhereUniqueInput!
    create: PictureUpdateInput!
    update: PictureUpdateInput!
  ): Bigpicture!

  deleteBigpicture(
    where: PictureWhereUniqueInput!
  ): Bigpicture!
  singleUpload(file: Upload!): File!
  multipleUpload(files: [Upload!]!): [File!]!
}

type AuthPayload {
  token: String!
  user: User!
}
type UserIdPayload {
  id: ID!
}

type Query {
  me: User
  allProducts: [Product!]
}

type Mutation {
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
  ): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
}

type Subscription {
  bigpicture(
    where: PictureSubscriptionWhereInput
  ): BigpictureSubscriptionPayload
}
